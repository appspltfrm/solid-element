{"version":3,"file":"defineComponent.js","sources":["../src/lib/defineComponent.tsx"],"sourcesContent":["import {AssignableType} from \"@appspltfrm/js-utils/core\";\nimport {getOwner, JSX, ParentProps} from \"solid-js\";\nimport {children, Component, createMemo, mergeProps, sharedConfig, splitProps} from \"solid-js\";\nimport {getNextElement, spread} from \"solid-js/web\";\nimport {CustomElement} from \"./customElement\";\nimport {CustomElementInterface} from \"./CustomElementInterface\";\nimport {CustomElementJSXAttributes} from \"./CustomElementJSXAttributes\";\nimport {CustomElementJSXEvents} from \"./CustomElementJSXEvents\";\nimport {CustomElementProps} from \"./CustomElementProps\";\nimport {defineCustomElement} from \"./defineCustomElement\";\nimport {childrenProp} from \"./internals/childrenProp\";\nimport {InternalClass} from \"./internals/InternalClass\";\nimport {InternalInstance} from \"./internals/InternalInstance\";\nimport {parentOwnerProp} from \"./internals/parentOwnerProp\";\nimport {reactivePropsProp} from \"./internals/reactivePropsProp\";\n\ntype DefineElementFn = () => void;\n\nexport type CustomElementComponent<TagName extends string, ElementType extends CustomElement, ComponentProps = CustomElementProps<ElementType>, Events extends {[P in keyof Events]: Event} = {}> = Component<ComponentProps & CustomElementJSXAttributes & CustomElementJSXEvents<ElementType, Events> & Omit<JSX.HTMLAttributes<ElementType>, keyof CustomElementJSXEvents<ElementType, Events>>> & {\n    tagName: TagName;\n    element: ElementType;\n    defineCustomElement(): void;\n}\n\nexport interface CustomElementComponentOptions<Props = any, Events = any> {\n    props?: Props,\n    events?: Events\n}\n\nexport type ElementComponent<TagName extends string, ComponentElement extends HTMLElement, Props> = Component<Partial<Props> & JSX.HTMLAttributes<ComponentElement> & CustomElementJSXAttributes> & {tagName: TagName, register: () => void};\n\nexport interface ElementComponentOptions {\n    define?: DefineElementFn | DefineElementFn[];\n    initialProps?: {[key: string]: any};\n    propsHandler?: (props: {[key: string]: any}) => void;\n}\n\nexport function defineComponent<TagName extends string, ElementType extends CustomElement, Props = CustomElementProps<ElementType>, Events extends {[P in keyof Events]: Event} = {}>(tagName: TagName, elementType: AssignableType<ElementType>, options?: CustomElementComponentOptions<Props, Events>): CustomElementComponent<TagName, ElementType, Props , Events>;\n\nexport function defineComponent<TagName extends string, ComponentElement extends HTMLElement, Props>(tagName: TagName, elementType: ComponentElement, options?: ElementComponentOptions): ElementComponent<TagName, ComponentElement, Props>;\n\nexport function defineComponent<TagName extends string, ComponentElement extends HTMLElement, Props>(tagName: TagName, options?: ElementComponentOptions): ElementComponent<TagName, ComponentElement, Props>;\n\nexport function defineComponent(tagName: string, elementTypeOrOptions?: AssignableType | ElementComponentOptions, componentOptions?: ElementComponentOptions | CustomElementComponentOptions): any {\n\n    const solidElementType = typeof elementTypeOrOptions === \"function\" && elementTypeOrOptions as any;\n    const options: Partial<ElementComponentOptions & CustomElementComponentOptions> | undefined = typeof elementTypeOrOptions === \"object\" ? elementTypeOrOptions as ElementComponentOptions : componentOptions;\n\n    function define() {\n\n        if (customElements.get(tagName)) {\n            return;\n\n        } else if (solidElementType) {\n            defineCustomElement(tagName, solidElementType);\n\n        } else if (options?.define) {\n            for (const d of Array.isArray(options.define) ? options.define : [options.define]) {\n                d();\n            }\n        }\n    }\n\n    let cmp: any;\n\n    if (solidElementType) {\n\n        const internalClass: InternalClass = solidElementType as any;\n\n        cmp = (rawProps: ParentProps<any>) => {\n            define();\n\n            const rawChildren = children(() => rawProps.children);\n            const [, uncheckedProps] = splitProps(rawProps, [\"children\"]);\n\n            const props = createMemo(() => {\n                const clone = {};\n                const descriptors = Object.getOwnPropertyDescriptors(uncheckedProps);\n                for (const key of Object.keys(descriptors)) {\n                    const fixed = internalClass[reactivePropsProp][key] ? `prop:${key}` : fixPropName(key);\n                    Object.defineProperty(clone, key !== fixed ? fixed : key, descriptors[key]);\n                }\n                return clone;\n            })\n\n            return createMemo(() => {\n                const el: any = sharedConfig.context ? getNextElement() : document.createElement(tagName);\n                const noShadow = (el as CustomElementInterface).renderRoot === el;\n                const childrenPropName = noShadow ? `prop:${childrenProp}` : \"children\";\n\n                (el as InternalInstance)[parentOwnerProp] = getOwner();\n\n                spread(el, mergeProps(props, {[childrenPropName]: rawChildren}), false, false);\n\n                return el;\n            })\n        }\n\n    } else {\n\n        cmp = ((rawProps: any) => {\n\n            define();\n\n            return createMemo(() => {\n\n                const rawChildren = children(() => rawProps.children);\n                const [_, uncheckedProps] = splitProps(rawProps, [\"children\"]);\n\n                const el = sharedConfig.context ? getNextElement() : document.createElement(tagName);\n\n                const props = createMemo(() => {\n                    const clone = {};\n                    const descriptors = Object.getOwnPropertyDescriptors(uncheckedProps);\n                    for (const key of Object.keys(descriptors)) {\n                        const fixed = fixPropName(key);\n                        Object.defineProperty(clone, key !== fixed ? fixed : key, descriptors[key]);\n                    }\n\n                    options?.propsHandler?.(clone);\n\n                    return clone;\n                })\n\n                spread(el, mergeProps(options?.initialProps, props, {children: rawChildren ?? []}), false, false);\n\n                return el;\n            })\n        })\n    }\n\n    cmp[\"tagName\"] = tagName;\n    cmp[\"defineCustomElement\"] = define;\n\n    if (solidElementType) {\n        cmp[\"element\"] = solidElementType;\n    }\n\n    return cmp;\n}\n\nconst notFixableProps = [\"class\", \"className\", \"classList\", \"ref\", \"style\"];\n\nfunction fixPropName(key: string) {\n\n    if (key.includes(\":\") || key.startsWith(\"on\") || notFixableProps.includes(key)) {\n        return key;\n    } else if (key.includes(\"-\")) {\n        return `attr:${key}`;\n    } else {\n        return `prop:${key}`;\n    }\n}\n"],"names":["defineComponent","tagName","elementTypeOrOptions","componentOptions","solidElementType","options","define","customElements","get","defineCustomElement","d","Array","isArray","cmp","internalClass","rawProps","rawChildren","children","uncheckedProps","splitProps","props","createMemo","clone","descriptors","Object","getOwnPropertyDescriptors","key","keys","fixed","reactivePropsProp","fixPropName","defineProperty","el","sharedConfig","context","getNextElement","document","createElement","noShadow","renderRoot","childrenPropName","childrenProp","parentOwnerProp","getOwner","mergeProps","_","propsHandler","spread","initialProps","notFixableProps","includes","startsWith"],"mappings":"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"}